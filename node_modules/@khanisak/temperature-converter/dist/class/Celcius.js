"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Celcius = void 0;
var Delisle_1 = require("./Delisle");
var Fahrenheit_1 = require("./Fahrenheit");
var Kelvin_1 = require("./Kelvin");
var Newton_1 = require("./Newton");
var Rankine_1 = require("./Rankine");
var Reamur_1 = require("./Reamur");
var Romer_1 = require("./Romer");
var Temperature_1 = __importDefault(require("./Temperature"));
var Celcius = /** @class */ (function (_super) {
    __extends(Celcius, _super);
    function Celcius(value) {
        var _this = _super.call(this, value) || this;
        _this.toCelcius = function () { return _this; };
        _this.toDelisle = function () { return new Delisle_1.Delisle((100 - _this.value) * 1.5); };
        _this.toFahrenheit = function () { return new Fahrenheit_1.Fahrenheit((_this.value * 9 / 5) + 32); };
        _this.toKelvin = function () { return new Kelvin_1.Kelvin(_this.value + 273.15); };
        _this.toNewton = function () { return new Newton_1.Newton(_this.value * 33 / 100); };
        _this.toRankine = function () { return new Rankine_1.Rankine(1.8 * _this.value + 491.67); };
        _this.toReamur = function () { return new Reamur_1.Reamur(_this.value * 0.8); };
        _this.toRomer = function () { return new Romer_1.Romer(_this.value * 21 / 40 + 7.5); };
        _this.unit = Celcius.unit;
        return _this;
    }
    Celcius.unit = {
        name: 'Celcius',
        code: 'Â°C'
    };
    return Celcius;
}(Temperature_1.default));
exports.Celcius = Celcius;
